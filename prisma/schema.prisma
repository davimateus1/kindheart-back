generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  NOT_INFORM
}

enum Role {
  ADMIN
  VOLUNTARY
  ELDERLY
}

enum Status {
  FREE
  ALOCATED
  STARTED
  FINISHED
  CANCELED
}

enum ChatStatus {
  ACTIVE
  INACTIVE
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELED
}

model User {
  id                   Int          @id @default(autoincrement())
  first_name           String
  last_name            String
  cpf                  String       @unique
  birth_date           DateTime
  email                String       @unique
  gender               Gender       @default(NOT_INFORM)
  password             String
  role                 Role
  address              String
  photo                String
  personal_phone       String       @unique
  relative_phone       String
  verified             Boolean      @default(false)
  user_code            String
  created_at           DateTime     @default(now())
  updated_at           DateTime     @updatedAt
  activities_elderly   Activity[]   @relation("user_elderly")
  activities_voluntary Activity[]   @relation("user_voluntary")
  chats_sender         Chat[]       @relation("user_sender")
  chats_receiver       Chat[]       @relation("user_receiver")
  author_messages      Message[]
  user_reviews         Review[]
  user_one_friendship  Friendship[] @relation("user_one_friendship")
  user_two_friendship  Friendship[] @relation("user_two_friendship")
}

model Activity {
  id                Int      @id @default(autoincrement())
  topic             Topic    @relation(name: "activity_topic", fields: [topic_id], references: [id])
  user_elderly      User     @relation(name: "user_elderly", fields: [user_elderly_id], references: [id])
  user_voluntary    User?    @relation(name: "user_voluntary", fields: [user_voluntary_id], references: [id])
  user_elderly_id   Int
  user_voluntary_id Int?
  topic_id          Int
  description       String
  status            Status   @default(FREE)
  likes             Int      @default(0)
  likedBy           Int[]    @default([])
  image             String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  reviews           Review[]
}

model Review {
  id              Int      @id @default(autoincrement())
  user_reviewer   User     @relation(fields: [userId], references: [id])
  activity_revied Activity @relation(fields: [activityId], references: [id])
  userId          Int
  activityId      Int
  rating          Int      @default(0)
  feedback        String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model Message {
  id         Int      @id @default(autoincrement())
  author     User     @relation(fields: [author_id], references: [id])
  chat       Chat     @relation(fields: [chat_id], references: [id])
  author_id  Int
  chat_id    Int
  text       String
  is_read    Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Chat {
  id               Int        @id @default(autoincrement())
  user_sender      User       @relation(name: "user_sender", fields: [user_sender_id], references: [id])
  user_receiver    User       @relation(name: "user_receiver", fields: [user_receiver_id], references: [id])
  activity_id      Int
  status           ChatStatus @default(ACTIVE)
  success          Boolean    
  user_sender_id   Int
  user_receiver_id Int
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
  messages         Message[]
}

model Topic {
  id             Int        @id @default(autoincrement())
  label          String
  value          String     @unique
  activity_topic Activity[] @relation("activity_topic")
}

model Friendship {
  id          Int              @id @default(autoincrement())
  user_one    User             @relation(name: "user_one_friendship", fields: [user_one_id], references: [id])
  use_two     User             @relation(name: "user_two_friendship", fields: [user_two_id], references: [id])
  user_one_id Int
  user_two_id Int
  status      FriendshipStatus
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
}
